# GitHub Actions workflow for automated documentation building and deployment
name: Documentation Build and Deploy

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'documentation/**'
      - 'scripts/**'
      - '.github/workflows/documentation-workflow.yml'
  pull_request:
    branches: [ main ]
    paths: 
      - 'documentation/**'
  release:
    types: [published]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  validate:
    name: Validate Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Validate documentation structure
        run: |
          python scripts/version_manager.py validate

      - name: Check for broken links
        run: |
          make lint

  build:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        version: [current, all]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build documentation
        run: |
          if [ "${{ matrix.version }}" = "all" ]; then
            make docs-build-all
          else
            make html
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: documentation-${{ matrix.version }}
          path: _build/html/
          retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: documentation-all
          path: _build/html/

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: documentation-all
          path: _build/html/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./_build/html
          cname: docs.gra-platform.org

  create-version-on-release:
    name: Create Documentation Version on Release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create new documentation version
        run: |
          VERSION=${{ github.event.release.tag_name }}
          MESSAGE="${{ github.event.release.name }}"
          python scripts/version_manager.py create $VERSION --message "$MESSAGE"

      - name: Commit version changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add documentation/
          git add _static/versions.json
          git add _static/switcher.json
          git commit -m "Add documentation for version ${{ github.event.release.tag_name }}" || exit 0
          git push
